% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_shortcuts.R
\name{add_rstudio_shortcuts}
\alias{add_rstudio_shortcuts}
\alias{example_shortcuts_yaml}
\alias{example_shortcuts_r}
\title{Add Shortcuts to RStudio}
\usage{
add_rstudio_shortcuts(path = NULL, set_keyboard_shortcuts = FALSE)

example_shortcuts_yaml()

example_shortcuts_r()
}
\arguments{
\item{path}{The path to your \code{.shtrcts.yaml} file. If \code{NULL}, \pkg{shrtcts}
will look in your R or OS home directory (via \code{\link[fs:path_expand]{fs::path_home_r()}} or
\code{\link[fs:path_expand]{fs::path_home()}}). You can set this path via the global option
\code{"shrtcts.path"}. For more information, see the help documentation on
\link{paths}.}

\item{set_keyboard_shortcuts}{If \code{TRUE}, will attempt to set the RStudio
keyboard shortcuts in \code{addins.json}.}
}
\description{
Add up to 100 fully configurable shortcuts to RStudio. Store your shortcuts
in \code{.shrtcts.yaml} in your R home or OS home directory. Then add
\code{add_rstudio_shortcuts()} to your \verb{~/.Rprofile} to load the shortcuts when
starting R. Your shortcuts will automatically appear in the Addins window
(if not, try restarting your R session one more time). Your shortcuts can
be arbitrary functions written inline or functions from other packages. You
can set their names and even assign keyboard shortcuts to your shrtcts.
See detailed sections below.
}
\details{
\subsection{shrtcts R Format}{

Use the following template to organize your \code{.shrtcts.R}. You can write
each shortcut in regular R code, annotated with
\href{https://roxygen2.r-lib.org/}{roxygen2} inline documentation comments.
The comment format uses standard roxygen2 formatting, with a few
additional roxygen tags specifically for \strong{shrtcts}\if{html}{\out{<div class="r">}}\preformatted{#' Say Something Nice
#'
#' A demo of cool things.
#'
#' @interactive
#' @shortcut Ctrl+Alt+P
praise::praise
}\if{html}{\out{</div>}}
\subsection{roxygen2 Tags}{

\strong{shrtcts} recognizes the following roxygen tags. Tags are optional
unless otherwise specified.
\itemize{
\item \verb{@title} (required): The name of the shortcut’s addin in RStudio.
The tag itself is not required, the first line of untagged text (\verb{#' Say Something Nice} above) is interpreted as the title.
\item A \emph{function}, either exported from another package,
e.g. \code{praise::praise} or as an anonymous or named function provided
immediately below the roxygen2 comments section. (Function names are
ignored if provided).
\item \verb{@description}: A description of the shortcut. Can be specified with
the roxygen tag or it can be the first paragraph of untagged text
after the title line.
\item \verb{@interactive}: Whether or not the shortcut’s addin should be
executed interactively.

Non-interactive addins are run in the background, without alerting
the user and without providing a mechanism for the user to cancel
the function.

If the shortcut is interactive and calls a function stored in
another package, the code to execute the function will be displayed
in the console, rather than the placeholder shortcut from
\strong{shrtcts}.
\item \verb{@id}: An integer id (< 100) used to link the shortcut to a
specific placeholder function in \strong{shrtcts}. For example, \verb{#' @id 5} will link the provided shortcut to \code{shrtcts:::shortcut_05()}.
This is particularly useful if you have a keyboard shortcut linked
to your shortcut, although the need for this tag is mitigated by the
\verb{@shortcut} tag.
\item \verb{@shortcut}: A combination of keys to be used as a keyboard shortcut
in RStudio. Keyboard shortcuts are only applied if
\code{set_keyboard_shortcuts} is set when calling
\code{\link[=add_rstudio_shortcuts]{add_rstudio_shortcuts()}}. This
option is disabled by default.
}
}

}

\subsection{Where to Store Your Shortcuts}{

Save your shortcuts R (or YAML) file as \code{.shrtcts.R} or \code{.shrtcts.yml}
in your home directory or in the \code{.config} directory in your home
directory — use \code{\link[fs:path_expand]{fs::path_home_r()}} or
\code{\link[fs:path_expand]{fs::path_home()}} to locate your home directory.
In other words: \verb{~/.config/.shrtcts.R} or \verb{~/.shrtcts.yml}.

You can test that \strong{shrtcts} correctly finds your shortcuts file – or
confirm which file will be used by \strong{shrtcts} – using
\code{\link[=locate_shortcuts_source]{locate_shortcuts_source()}}.
}

\subsection{Install Your Shortcuts}{

Run \code{add_rstudio_shortcuts()} to install your shortcuts. You’ll need to
restart your R session for RStudio to learn your shortcuts.

To also update your \strong{shrtcts}-related keyboard shortcuts, set
\code{set_keyboard_shortcuts = TRUE}. This will update the keyboard shortcuts
stored in RStudio’s \code{addins.json}, typically stored in
\verb{~/.config/rstudio/keybindings} (>= 1.3) or \verb{~/.R/rstudio/keybindings}
(< 1.3). If this file is stored in a non-standard location in your
setup, you can provide \code{set_keyboard_shortcuts} with the correct path to
\code{addins.json}. Whenever \strong{shrtcts} updates the shortcut keybindings, a
complete restart of RStudio is required (hint: use
\code{usethis:::restart_rstudio()}).
}

\subsection{RStudio Keyboard Shortcuts}{

Once you’ve setup an RStudio Addin via \strong{shrtcts}, there are two ways
to link the shortcut’s addin to a keyboard shortcut.

You can verify and list the current shortcuts and their keyboard
bindings with \code{\link[=list_shortcuts]{list_shortcuts()}}.\if{html}{\out{<div class="r">}}\preformatted{shrtcts::list_shortcuts()
}\if{html}{\out{</div>}}\preformatted{##                                name       addin shrtcts_keybinding rstudio_keybinding
## 1                 10 random numbers shortcut_01               <NA>               <NA>
## 2 New Temporary R Markdown Document shortcut_02   Ctrl+Alt+Shift+T   Ctrl+Alt+Shift+T
## 3   A Random Number Between 0 and 1 shortcut_03               <NA>               <NA>
## 4                Say Something Nice shortcut_97         Ctrl+Alt+P         Ctrl+Alt+P
}
\subsection{Declare Keyboard Shortcuts in \code{.shrtcts.R}}{

You can use the \verb{@shortcut} tag to declare the shortcut in \code{.shrtcts.R}
(or \verb{shortcut:} in the YAML \code{.shrtcts.yml}).

To update the keyboard shortcuts (for shrtcts only!), set
\code{set_keyboard_shortcuts = TRUE} when calling \code{add_rstudio_shortcuts()}.
If you use this method, shortcuts set manually in RStudio will be
overwritten, so you should choose one method or the other.
\itemize{
\item \code{.shrtcts.R}\if{html}{\out{<div class="r">}}\preformatted{#' Say Something Nice
#'
#' @description A demo of cool things
#' @interactive
#' @shortcut Ctrl+Alt+P
praise::praise
}\if{html}{\out{</div>}}
\item \code{.shrtcts.yml}\if{html}{\out{<div class="yaml">}}\preformatted{- Name: Say Something Nice
  Description: A demo of cool things
  Binding: praise::praise
  shortcut: Ctrl+Alt+P
  Interactive: true
}\if{html}{\out{</div>}}
}

A full restart of RStudio is required whenever \strong{shrtcts} udpates the
shortcut keybindings. \strong{shrtcts} only manages keybindings for its own
addins, and it doesn’t check for conflicting key combinations, so you
may want to double check the RStudio menu.

If anything goes wrong, a backup of the keybindings are saved as
\code{addins.json.bak} in the same folder where \code{addins.json} was found. Use
\code{location_addins_json()} to find this file.
}

\subsection{Setting Keyboard Shortcuts via RStudio Menus}{

You can create a keyboard shortcut for the addin using the \emph{Tools} >
\emph{Modify keyboard shortcuts} menu.

If you create a shortcut for an addin via the menu, it’s a good idea to
set the \code{id} of the shortcut.

You can set your keyboard shortcuts manually in your \code{.shrtcts.R} or
\code{.shrtcts.yml} files, using the \verb{@shortcut} tag or \verb{shortcut:} item
name.
}

}

\subsection{shrtcts YAML format}{

\strong{shrtcts} initially provided a way to specify the shortcuts in a YAML
file. This made sense because everything is YAML these days, so why not
add yet another YAML config file to the mix? But writing R code inside
YAML is, um, less than ideal. So it’s no longer recommended, but it is
still supported (for now). To convert existing shortcuts from YAML to
the roxygen2 format, use the internal \code{shrtcts:::migrate_yaml2r()}
function.

Use the following template to organize your \code{.shrtcts.yaml}. Each
shortcut is a YAML list item with the following structure:\if{html}{\out{<div class="yaml">}}\preformatted{- Name: Make A Noise
  Description: Play a short sound
  Binding: beepr::beep
  Interactive: true
  id: 42
  shortcut: Ctrl+Shift+B
}\if{html}{\out{</div>}}
}
}
\section{Functions}{
\itemize{
\item \code{example_shortcuts_yaml}: An example \code{.shrtcts.yml} file.

\item \code{example_shortcuts_r}: An example \code{.shrtcts.R} file.
}}

\examples{
# Add shortcuts to ~/.shrtcts.yaml (see help above)

# Add this to your ~/.Rprofile to automatically load shortcuts
if (interactive() && requireNamespace("shrtcts", quietly = TRUE)) {
  shrtcts::add_rstudio_shortcuts()
}

}
\seealso{
\code{\link[=list_shortcuts]{list_shortcuts()}}
}
